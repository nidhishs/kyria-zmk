/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    behaviors {
        osm: osm {
            compatible = "zmk,behavior-hold-tap";
            label = "One Shot Mod";
            bindings = <&kp>, <&osm_sk>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-while-undecided-linger;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "Auto-Shift";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
        };

        osm_sk: osm_sk {
            compatible = "zmk,behavior-sticky-key";
            label = "OSM_SK";
            bindings = <&kp>;
            #binding-cells = <1>;
            ignore-modifiers;
            lazy;
            quick-release;
            release-after-ms = <280>;
        };
    };

    combos {
        compatible = "zmk,combos";

        mouse {
            bindings = <&tog 3>;
            key-positions = <43 46>;
            layers = <0>;
            timeout-ms = <75>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESC   &as LS(Q) Q  &as LS(W) W  &as LS(E) E  &as LS(R) R  &as LS(T) T                              &as LS(Y) Y  &as LS(U) U  &as LS(I) I   &as LS(O) O  &as LS(P) P     &kp BACKSPACE
&kp TAB   &as LS(A) A  &as LS(S) S  &as LS(D) D  &as LS(F) F  &as LS(G) G                              &as LS(H) H  &as LS(J) J  &as LS(K) K   &as LS(L) L  &as COLON SEMI  &as DQT SQT
&kp CAPS  &as LS(Z) Z  &as LS(X) X  &as LS(C) C  &as LS(V) V  &as LS(B) B  &none  &mo 1  &mo 1  &none  &as LS(N) N  &as LS(M) M  &as LT COMMA  &as GT DOT   &as QMARK FSLH  &kp ENTER
                                    &none        &none        &kp SPACE    &sl 1  &none  &none  &sl 2  &kp SPACE    &none        &none
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        symbol {
            bindings = <
&none  &kp EXCL          &kp AT            &kp HASH        &kp DOLLAR      &kp PRCNT                                       &kp CARET  &kp AMPS   &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none
&none  &osm LSHFT LSHFT  &osm LCTRL LCTRL  &osm LALT LALT  &osm LGUI LGUI  &kp MINUS                                       &kp PLUS   &kp GRAVE  &kp BSLH   &kp LBKT              &kp RBKT               &none
&none  &kp LG(Z)         &kp LG(X)         &kp LG(C)       &kp LG(V)       &kp UNDERSCORE  &trans  &trans  &trans  &trans  &kp EQUAL  &kp TILDE  &kp PIPE   &kp LBRC              &kp RBRC               &none
                                           &none           &trans          &trans          &trans  &none   &trans  &trans  &trans     &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>,
                <&inc_dec_kp DOWN_ARROW UP_ARROW>;
        };

        num {
            bindings = <
&trans  &kp N1  &kp N2    &kp N3    &kp N4     &kp N5                                  &kp N6  &kp N7          &kp N8          &kp N9            &kp N0            &trans
&trans  &trans  &trans    &kp UP    &trans     &trans                                  &trans  &osm LGUI LGUI  &osm LALT LALT  &osm LCTRL LCTRL  &osm LSHFT LSHFT  &trans
&trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans  &trans  &trans  &trans  &trans  &bt BT_PRV      &bt BT_CLR      &out OUT_TOG      &bt BT_NXT        &trans
                          &trans    &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                     &trans     &trans    &trans    &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                     &trans     &trans    &kp UP    &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans    &trans
            >;
        };
    };
};
