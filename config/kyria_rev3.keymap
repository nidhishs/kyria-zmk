/* 50 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────────────┬───────────────────────────────╮
  │  0   1   2   3   4   5         │          6   7   8   9 10  11 │
  │ 12  13  14  15  16  17         │         18  19  20  21 22  23 │
  │ 24  25  26  27  28  29  30  31 │ 32  33  34  35  36  37 38  39 │
  ╰───────────╮ 40  41  42  43  44 │ 45  46  47  48  49 ╭──────────╯
              ╰────────────────────┴────────────────────╯
*/

#include <behaviors/num_word.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#undef ZMK_MOUSE_DEFAULT_MOVE_VAL // 600
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500

// Macros for AutoShift
# define AS_1(keycode) &as LS(keycode) keycode
# define AS_2(keycode1, keycode2) &as keycode1 keycode2

&sk {
    release-after-ms = <5000>;
    quick-release;
    lazy;
};

&num_word { layers = <2>; };

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod - Right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 40 41 42 30 31 32 33 43 44 45 46 47 48 49>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod - Left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 34 35 36 37 38 39 47 48 49 30 31 32 33 43 44 45 46 40 41 42>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "Swapper";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "Num Layer Dance";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&num_word>;
        };

        mouse: mouse {
            compatible = "zmk,behavior-tri-state";
            label = "Smart Mouse";
            #binding-cells = <0>;
            bindings = <&tog 4>, <&none>, <&tog 4>;

            ignored-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 32 33 34 35 36 37 38 39 45 46 47 48 49>;
            ignored-layers = <4>;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "Auto Shift";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        smart-mouse {
            bindings = <&mouse>;
            key-positions = <46 47>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ALP {
            bindings = <
&none  AS_1(X)  AS_1(Q)  AS_1(M)     AS_1(W)  AS_1(Z)                                              AS_2(DOUBLE_QUOTES, SQT) AS_1(F)        AS_1(O)                 AS_1(U)              AS_1(J)                     &none
&none  AS_1(N)  AS_1(R)  AS_1(T)     AS_1(S)  AS_1(G)                                              AS_1(Y)                  AS_1(H)        AS_1(A)                 AS_1(E)              AS_1(I)                     &none
&none  AS_1(B)  AS_1(L)  AS_1(D)     AS_1(C)  AS_1(V)     &none           &none  &none  &none      AS_1(K)                  AS_1(P)        AS_2(SEMICOLON, COMMA)  AS_2(COLON, PERIOD)  AS_2(QUESTION, EXCLAMATION) &none
                         &kp C_MUTE  &none    &num_dance  &kp LEFT_SHIFT  &none  &none  &kp SPACE  &sl 1                  &none        &kp C_PP
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        SYM-NAV {
            bindings = <
&trans  &kp TILDE      &kp LESS_THAN   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GREATER_THAN                                  &kp C_NEXT        &kp HOME       &kp RG(DOWN)  &kp RG(UP)    &kp END    &trans
&trans  &kp GRAVE      &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND                                     &kp C_PLAY_PAUSE  &kp LEFT       &kp DOWN      &kp UP_ARROW  &kp RIGHT  &trans
&trans  &kp BACKSLASH  &kp AT_SIGN     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE          &trans  &trans  &trans  &trans  &kp C_PREV        &kp BACKSPACE  &kp ESC       &kp TAB       &kp ENTER  &trans
                                       &trans                &trans                 &trans            &trans  &trans  &trans  &trans  &trans            &trans         &trans
            >;
        };

        NUM {
            bindings = <
&trans  &kp ASTERISK    &kp PLUS   &kp MINUS  &kp EQUAL  &kp FSLH                                       &kp CARET  &kp N1  &kp N2  &kp N3  &kp DOLLAR   &trans
&trans  &sk LEFT_SHIFT  &sk LCTRL  &sk LALT   &sk LGUI   &swapper                                       &kp N0     &kp N4  &kp N5  &kp N6  &kp DOT      &trans
&trans  &kp LG(Z)       &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(LS(Z))  &trans  &trans  &trans  &trans  &kp HASH   &kp N7  &kp N8  &kp N9  &kp PERCENT  &trans
                                   &trans     &trans     &trans         &trans  &trans  &trans  &trans  &trans     &trans  &trans
            >;
        };

        MERGE {
            bindings = <
&trans  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &out OUT_TOG  &caps_word                                     &kp C_NEXT        &kp HOME  &kp RG(DOWN)  &kp RG(UP)  &kp END    &trans
&trans  &sk LSHFT   &sk LCTRL   &sk LALT    &sk LGUI      &swapper                                       &kp C_PLAY_PAUSE  &kp LEFT  &kp DOWN      &kp UP      &kp RIGHT  &trans
&trans  &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)     &kp LS(LG(Z))  &trans  &trans  &trans  &trans  &kp C_PREV        &kp BSPC  &kp ESC       &kp TAB     &kp RET    &trans
                                &trans      &trans        &trans         &trans  &trans  &trans  &trans  &trans            &trans    &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &none  &none  &none   &none   &none                                      &none      &msc MOVE_DOWN  &mmv MOVE_UP    &msc MOVE_UP     &none  &trans
&trans  &none  &none  &none   &none   &none                                      &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &trans
&trans  &none  &none  &none   &none   &none   &trans  &trans  &trans  &trans     &none      &mkp MB4        &none           &mkp MB5         &none  &trans
                      &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        MERGE {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
